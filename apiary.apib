FORMAT: 1A
HOST: https://bapi.inbeacon.nl

# inBeacon Business API 
Welcome to the inBeacon Business API (BAPI) reference. 

This documentation lists and describes the individual resources you can use to manipulate objects 
on the inBeacon Platform. 

This inBeacon API is based on REST. If you are new to APIs, review the info in this section.

Happy calling!


# Getting started

## messages and notifications
The inBeacon BAPI supports messages send to the inBeacon platform *(inbound)*, and notifications 
send from the inBeacon platform to your system's endpoint *(outbound)*.


>#### Note
>In order to process *outbound* messages you need to setup your own service endpoint. 
>Processing of outbound notifications is optional.


## Configuration
Go to [Manage->account configuration](https://console.inbeacon.nl/accmgr/settings)  to set up your interface

- Choose “inbeacon default API” as your BAPI driver.
- Enter your service endpoint where the inBeacon BAPI driver can send *outbound* notifications to. (optional)
- Enter a service username/password to be used for *outbound* messages to your service endpoint using Basic HTTP Authentication. (optional)  


## Usage Limits
The inBeacon BAPI has the following limits in place:

-  Users of demo accounts:
    240 requests per 24 hour period.
- Business and enterprise accounts:
    Up to 240000 requests per 24 hour period, depending on contract.


## Inbound requests
All inbound requests use the following service endpoint:

`https://bapi.inbeacon.nl/bapi/v1`

A typical BAPI request is generally of the following form:
```
https://bapi.inbeacon.nl/bapi/v1/{resource}?{parameters}
```
Or, using the command line:
```bash
curl "https://bapi.inbeacon.nl/bapi/v1/{resource}?{parameters}"
```

These services return data in the HTTP request as JSON for parsing and/or processing by your application.

## Outbound notifications
Outbound notifications

The inBeacon BAPI uses HTTP requests to your own defined endpoint.
The outbound notification is always a POST type. The post data is a json object. 
Data needs to be returned as JSON for parsing and/or processing by the inBeacon platform
You can define your own endpoint for outbound notifications (see Getting started) This can be any HTTP or HTTPS endpoint
```
POST <your defined endpoint>?{parameters}
```
If you specified a user/password, this will be supplied using HTTP Basic Authentication.

The outbound notification are optional. If not defined, the platform does not send outbound notifications.

The Post data is a JSON object containing the service specfier and optional data:
Post data example:
```json
    {
        “service”:”triggerupdate”,
        .. other data ..
    }
```

# Authentication

You need your account `client ID` and `client secret` to talk to the inBeacon endpoint.
Go to [Manage->account](https://console.inbeacon.nl/accmgr) to look for the clientID and clientSecret under “developer credentials”


>#### Caution
>Please keep your `client secret` secure. This key — though used to generate the signature — should not be passed within any requests, stored on any websites, or posted to any public forum. Anyone obtaining this signing key "in the clear" could spoof requests using your identity.

For authentication, two parameters are required in addition to the standard parameters:

- Your `client ID`. You must provide a client ID when accessing any of the API libraries or services. Your client ID is passed as the value of the client parameter.
- A unique `signature`, generated using your `client-SECRET`. This is passed as the value of the signature parameter. More information about generating a signature can be found below, in the Digital Signatures section.

Example:
```
https://bapi.inbeacon.nl/bapi/v1/user/452344client=CLIENT_ID&signature=YOUR_URL_SIGNATURE
```

>#### Note
>It is currently possible to send BAPI requests without signature by turning the “signature required” option off for your account. (See Account settings -> Business API settings)
>However this will change in the future and signatures will become mandatory for all communication.

# Signature calculation

inBeacon BAPI web services require digital signatures, generated using a cryptographic key provided to you for 
that purpose. The signing process combines a URL and the key together using an encryption algorithm. 
The resulting unique signature allows our web services to verify that any site generating requests using your 
client ID are authorized to do so.

>The signature is unique per URL, ensuring that requests that use your client ID cannot be modified without requiring a new signature to be generated.
>Your cryptographic URL-signing key (the client-SECRET) will be issued with your client ID and is a 
>"secret shared key" between you and inBeacon. This signing key is yours alone and unique to your account. 
>For that reason, please keep your signing key secure. This key — though used to generate the signature — should not be 
>passed within any requests, stored on any websites, or posted to any public forum. Anyone obtaining this signing key 
>"in the clear" could spoof requests using your identity.

## Generating valid signatures

Attempting to access a web service with an invalid signature will result in a HTTP 403 (Forbidden) error. 
(Except for testing purposes) As you convert your applications to use URL signing, make sure to test your 
signatures to ensure they initiate a valid request. You should first test whether the original URL is valid as 
well as test whether you generate the correct signatures.

>All services require UTF-8 character encoding (which implicitly includes ASCII). Make sure that if your applications operate using other character sets, that they construct URLs using UTF-8 and properly URL-encode them beforehand.


To create a valid signature for your request:
- Construct your URL, making sure to include your client and other parameters. Note that any non-standard characters will need to be URL-encoded:

    ```
    https://bapi.inbeacon.nl/bapi/v1/user/5445?client=CLIENT_ID 
    ```

- Strip off the domain portion of the request, leaving only the path and the query:

    ```
    /bapi/v1/user/5445?client=CLIENT_ID
    ```
    
- Retrieve your client-SECRET, which is encoded in a “modified Base64 for URLs” format, and sign the URL above using the HMAC-SHA1 algorithm. You may need to decode this key into its original binary format. 
    >Note that in most cryptographic libraries, the resulting signature will be in binary format.

>####Note:
>Modified Base64 for URLs replaces the + and / characters of standard Base64 with - and _ respectively, so that these Base64 signatures no longer need to be URL-encoded.


- Encode the resulting binary signature using the “modified Base64 for URLs” to convert this signature into something that can be passed within a URL.

- Attach this signature to the URL within a signature parameter:

    ```
    http://api.inbeacon.nl/bapi/v1/user/5445?client=CLIENT_ID&signature={calculated base64 signature}
    ```


## Signature example


PHP example
```php
    function base64url_encode($data) {
      return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');
    }
    
    function base64url_decode($data) {
      return base64_decode(strtr($data, '-_', '+/'));
    }
    
    $urlPartToSign = "/bapi/v1/".$resource."?".$parameters;
    
    $mc =base64url_decode($clientsecret);
    
    if (.. post message..) {
      $verify = $urlPartToSign.$postPartToSign;
    }
    else
      $verify = $urlPartToSign;
    
    $sha1 = hash_hmac('sha1', $verify, $mc, true);    // raw sha1
    $b64 =base64url_encode($sha1);
    $finalUrl="https://bapi.inbeacon.nl".$urlPartToSign."&signature=".$b64;
```


# Group Customer resource
These operations are available on the customer resource

## Get customer by id [/bapi/v1/customers/{id}/{?client,signature}]
Get customer information of customer {id}, which is the inBeacon internal ID


+ Parameters
    + id: `1233` (number, required) - inBeacon customer ID
    + client: `ID` (string, required) - Account client-id
    + signature: `SIG` (string, required) - Message signature


### Get customer by id [GET]

+ Response 200 (application/json)

    + Body
        {
            "id": "41",
            "device_id": "dbseed",
            "name": "Mieke boudewijn",
            "email": "mieke.boudewijn@gmail.com",
        }

+ Response 404 (application/json)



## Search customers [/bapi/v1/customers{?name,email,customerid,client,signature}]
Search a customer by name, email and/or customerid. Multiple values combine into an AND request. May contain % to indicate wildcards.

+ Parameters
    + client: `ID` (string, required) - Account client-id
    + name: `alice` (string, optional) - Search for a customer by name
    + email: `joe@me.com` (string, optional) - Search by email
    + customerid: `344` (string, optional, ) - Search by customer id
    + signature: `SIG` (string, required) - Message signature


### Search customers [GET]

+ Response 200 (application/json)

    + Body

        [{
            "id": "41",
            "device_id": "dbseed",
            "name": "Hans Vrolijk",
            "email": "hans.vrolijk@gmail.com",
        },
        {
            "id": "42",
            "device_id": "dbseed2",
            "name": "Hans Anders",
            "email": "hans@gmail.com",
        }]
+ Response 401 (application/json)

## Update a customer [/bapi/v1/customers/{id}{?client,signature}]

Update information of customer `id`, which is the inBeacon internal ID.


- It is possible to remove properties by setting them to `null`.
- It is possible to define complex properties, like arrays or objects

+ Parameters
    + id: `1233` (number, required) - inBeacon customer ID
    + client: `ID` (string, required) - Account client-id
    + signature: `SIG` (string, required) - Message signature


### Update a customer [PUT]

+ Request (application/json)
    + Send an updated customer object, which only contains values to update or to delete. 
    + Body
        {
        "friend": "Jan Paulusma"
        }

+ Response 200 (application/json)
+ Response 401 (application/json)
    + no object data found
    + Body

+ Response 404 (application/json)
    + object not found (id does not exist)
    + Body

# Group Proximity resource
The proximity resource contains devices in a defined proximity range. This can be historic or actual.

To create external digital signage or clienteling solutions, you can get the current state of all 
current users who are in proximity of defined locations. You can use a polling mechanism and use this 
resource at a maximum rate of 1 time(s) per 30 seconds.

>#### Note
>It is also possible to use the actual_proximity_update notification which does not need polling. (To be defined)



## Get actual proxmity on all locations [/bapi/v1/proximity/actual/{?client,signature}]
Get actual proximity status of all locations

+ Parameters
    + client: `ID` (string, required) - Account client-id
    + signature: `SIG` (string, required) - Message signature


### Get all proximity [GET]

+ Response 200 (application/json)

    + Body
        {
            "id": "41",
            "device_id": "dbseed",
            "name": "Mieke boudewijn",
            "email": "mieke.boudewijn@gmail.com",
        }

+ Response 404 (application/json)

## Get actual proxmity on location [/bapi/v1/proximity/actual/{locationId}{?client,signature}]
Get actual proximity status of a single location with `locationId`

+ Parameters
    + locationId: `34` (number, required) - inBeacon location id
    + client: `ID` (string, required) - Account client-id
    + signature: `SIG` (string, required) - Message signature

### Get location proximity [GET]

+ Response 200 (application/json)

    + Body
        [
            {
                "id": "20397",
                "customer_id": "36212",
                "customer_name": "Dwight Schulz",
                "customer_email": "dwight@ateam.com",
                "customer_gender": "male",
                "customer_data": [],
                "timein": "16:10",
                "timein_timestamp": "1433427053",
                "location_id": "134",
                "location_name": "WVS Kalverstraat",
                "device_os": "ios",
                "device_hwcode": "iPhone6,2",
                "device_hw": "iPhone 5s "
            },
            {
                "id": "2344",
                "customer_id": "3919",
                "customer_name": "Dwight Schulz",
                "customer_email": "dwight@ateam.com",
                "customer_gender": "male",
                "customer_data": [],
                "timein": "16:10",
                "timein_timestamp": "1433427053",
                "location_id": "134",
                "location_name": "WVS Kalverstraat",
                "device_os": "ios",
                "device_hwcode": "iPhone6,2",
                "device_hw": "iPhone 5s "
            },
        ]

+ Response 404 (application/json)

# Group Outbound notifications
## Trigger update [/ https://your/defined/endpoint{?client}]

A trigger update service is send as notification that a user has triggered a special defined triggerflow element. 
You can define outbound trigger update notifications by using a BAPI context in your trigger flow designer.

When the trigger is fired, a trigger update notification is send to you. 
Depending on the process value, the result that is returned determines whether the trigger is executed (trigger flow continutes) or not.

+ Parameters
    + client: `ID` (string, required) - Account client-id

+ Attributes (object)
    + service: `triggerupdate` (string, required) - fixed notifiction identifier
    + customer: `{"name":"jean"...}` (object, required) - Customer object
    + trigger: `{"id":"455", "name":"shop entry"...}` (object, required) - Trigger object


### Trigger notification [POST]

+ Request (application/json)
    + This is notification is send to your endpoint
    + Body
        {
            “service”:”triggerupdate”,
            “customer”: {
                “id”: 956,
                “device_id”:”AN223a137a2f1ec163”,
                “customerid”: “33434JB3”,
                “email”: “dwight.schulz@ateam.com”,
                “IDFA”:”B9407F30-F5F8-466E-AFF9-25556B57FE6D”
                “friend”: {
                    “email”: “mr-t@ateam.com”,
                    “name”: “Mr T”
                }
            },
            “trigger”: {
                “id”: 7234,
                “name”: “binnenkomst winkel”,
                “trigtype”: “enterlocation”,
                “location”: “WVS Kalverstraat”
            }
        }

+ Response 200 (application/json)
    + Attributes (object)
        + result: `OK|NOK` (enum[string], required) - fixed notifiction identifier. OK = continue processing, NOK = stop processing.
        + update: `{}` (object, required) - Update object, update values of resources. Can be used to update or add attributes to customer object

    + Body
        {
            “result”:”NOK”,
            “update”: {
                “customer”: {
                    “emailsend”:true
                }
            }
        }

